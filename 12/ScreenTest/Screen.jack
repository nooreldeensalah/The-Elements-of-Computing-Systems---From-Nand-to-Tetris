// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    /** Initializes the Screen. */
    static boolean currentColor;
    function void init() {
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, xModulo16;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);
        let xModulo16 = x - (16 * (x / 16));
        if (currentColor)
        {
            let value = value | Math.power(2, xModulo16);   
        }
        else
        {
            let value = value & ~Math.power(2, xModulo16);
        }
        do Memory.poke(address, value);
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2)
    {
        var int a,b, dx, dy, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        while(~(a > dx) & ~(b>dy))
        {
            do Screen.drawPixel(x + a, y + b);
            let diff = a * dy - b * dx;
            if (diff < 0)
            {
                let a = a + 1;
                let diff = diff + dy;
            }
            else
            {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2)
    {
        do Screen.drawLine(x1, y1, x2, y1);
        do Screen.drawLine(x1, y1, x1, y2);
        do Screen.drawLine(x1, y2, x2, y2);
        do Screen.drawLine(x2, y1, x2, y2);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r)
    {
        var int dy;

        return;
    }
}

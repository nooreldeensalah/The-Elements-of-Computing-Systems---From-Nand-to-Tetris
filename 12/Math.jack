// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    /** Initializes the library. */
    function void init() 
    {
        var int i, j;
        let twoToThe = Array.new(16);
        let i = 0;
        let j = 1;
        while(i<16)
        {
            let twoToThe[i] = j;
            let i = i + 1;
            let j = j + j;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0)
        {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let i = 0;
        let sum = 0;
        let shiftedX = x;
        while(i<16)
        {
            if (Math.bit(y, i))
            {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;


    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y)
    {
        var int q, twoY, twoQY, diff, negY, negX, result;

        let negX = x < 0;
        let negY = y < 0;

        if (negX) 
        {
            let x = Math.abs(x);
        }

        if (negY)
        {
            let y = Math.abs(y);
        }

        if ((y > x) | (y < 0))
        {
            return 0;
        }

            let twoY = y + y;
            let q = x / twoY;
            let twoQY = q * twoY;
            let diff = x - twoQY;

        if (diff < y)
        {
            let result = q + q;
        }
        else
        {
            let result = q + q + 1;
        }

        if (negX = negY)
        {
            return result;
        }
        else
        {
        return -result;
        }
        }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x)
    {
        var int i, y, term;
        let i = 7;
        let y = 0;
        while(i > -1)
        {
            let term = Math.power((y + Math.power(2, i)), 2);
            if (~(term > x) & (term > 0))
            {
                let y = y + Math.power(2, i);
            }
            let i = i - 1;
        }
        return y;

    }

    /** Returns the greater number. */
    function int max(int a, int b) 
    {
        if (a > b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    function int bit(int x, int i)
    {
        return (~((x&(twoToThe[i]))=0));
    }
    function int power(int number, int exponent)
    {
        if (exponent = 0)
        {
            return 1;
        }
        return number * Math.power(number, exponent - 1);
    }
}
